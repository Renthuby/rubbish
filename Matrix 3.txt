import java.util.Scanner;

public class Matrix {
    static Scanner in = new Scanner(System.in);
    private double[][] object;

    public Matrix(double[][] object) {
        this.object = object;
    }

    public Matrix(int rows, int columns) {
        double[][] object = new double[rows][columns];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                object[i][j] = 0;
            }
        }
        this.object = object;
    }

    public Matrix(Matrix matrix) {
        this.object = matrix.object;
    }

    /**
     * Fills matrix with numbers from the input field.
     */
    public void fill() {
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                this.object[i][j] = in.nextDouble();
            }
        }
    }

    /**
     * Fills matrix with random numbers from lower bound to higher bound.
     * @param low lower bound.
     * @param high higher bound.
     */
    public void fillRandom(double low, double high) {
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                this.object[i][j] = (double) (Math.random() * (high - low) + low);
            }
        }
    }

    /**
     * Fills matrix with random integers from lower bound to higher bound.
     * @param low lower bound.
     * @param high higher bound.
     */
    public void fillRandomInt(int low, int high) {
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                this.object[i][j] = (double) ((int) (Math.random() * (high - low + 1) + low));
            }
        }
    }

    /**
     * Returns a row from matrix.
     * @param row the index of row.
     * @return a row as an array.
     */
    public double[] getRow(int row) {
        return this.object[row];
    }

    /**
     * Returns a column from matrix.
     * @param column the index of column.
     * @return a column as an array.
     */
    public double[] getColumn(int column) {
        double[] col = new double[this.object.length];
        for (int i = 0; i < this.object.length; i++) {
            col[i] = this.object[i][column];
        }
        return col;
    }

    /**
     * Returns an element from matrix.
     * @param row the index of row, where the element is located.
     * @param column the index of column, where the element is located.
     * @return element.
     */
    public double getElement(int row, int column) {
        return this.object[row][column];
    }

    /**
     * Returns count of rows in matrix.
     * @return count of rows.
     */
    public int getRows() {
        return this.object.length;
    }

    /**
     * Returns count of columns in matrix.
     * @return count of columns.
     */
    public int getColumns() {
        return this.object[0].length;
    }

    /**
     * Returns count of elements in matrix.
     * @return count of elements.
     */
    public int getSquare() {
        return this.object.length * this.object[0].length;
    }

    /**
     * Returns a part of matrix: from 0 row to a given row, from 0 column to a given column.
     * @param row a given row.
     * @param column a given column.
     * @return a part of matrix.
     */
    public Matrix getArea(int row, int column) {
        Matrix toReturn = new Matrix(row + 1, column + 1);
        for (int i = 0; i <= row; i++) {
            for (int j = 0; j <= column; j++) {
                toReturn.object[i][j] = this.object[i][j];
            }
        }
        return toReturn;
    }

    /**
     * Returns a part of matrix: from the first given row to the second given row, from the first given column to the second given column.
     * @param row0 the first given row.
     * @param row1 the second given row.
     * @param column0 the first given column.
     * @param column1 the second given column.
     * @return a part of matrix.
     */
    public Matrix getArea(int row0, int row1, int column0, int column1) {
        Matrix toReturn = new Matrix(row1 - row0 + 1, column1 - column0 + 1);
        for (int i = 0; i <= row1 - row0; i++) {
            for (int j = 0; j <= column1 - column0; j++) {
                toReturn.object[i][j] = this.object[i + row0][j + column0];
            }
        }
        return toReturn;
    }

    /**
     * Displays the matrix in the console, rounding elements to the second decimal place.
     * Elements in matrix don't changes.
     */
    public void print() {
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                System.out.printf("%.2f", this.object[i][j]);
                System.out.print(" ");
            }
            System.out.println();
        }
    }

    /**
     * Displays the matrix in the console, rounding elements to the integer.
     * Elements in matrix don't changes.
     */
    public void printInt() {
        int koeff;
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                if (this.object[i][j] > 0)
                    koeff = 1;
                else
                    koeff = -1;
                System.out.print((int) (this.object[i][j] + koeff * 0.5) + " ");
            }
            System.out.println();
        }
    }

    /**
     * Replace an element in the matrix to another.
     * @param row index of row, where the element located.
     * @param column index of column, where the element located.
     * @param count replacement element.
     * @return matrix with changed element.
     */
    public Matrix setElement(int row, int column, double count) {
        Matrix result = new Matrix(this);
        result.object[row][column] = count;
        return result;
    }

    /**
     * Replace a row in the matrix to another.
     * The replacement row must be the same length as the replaced row.
     * @param row the replacement row.
     * @param rowNumber index of replaced row.
     * @return matrix with changed row.
     */
    public Matrix setRow(double row[], int rowNumber) {
        Matrix result = new Matrix(this);
        result.object[rowNumber] = row;
        return result;
    }

    /**
     * Replace a column in the matrix to another.
     * The replacement column must be the same length as the replaced column.
     * @param column the replacement column.
     * @param columnNumber index of replaced column.
     * @return matrix with changed row.
     */
    public Matrix setColumn(double[] column, int columnNumber) {
        Matrix result = new Matrix(this);
        for (int i = 0; i < this.object.length; i++) {
            result.object[i][columnNumber] = column[i];
        }
        return result;
    }

    /**
     * Multiplies each element in matrix by number.
     * @param count a multiplier.
     * @return matrix with multiplied elements.
     */
    public Matrix multiply(double count) {
        Matrix result = new Matrix(this.getRows(), this.getColumns());
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                result.object[i][j] = this.object[i][j] * count;
            }
        }
        return result;
    }

    /**
     * Multiplies matrix by matrix.
     * The count of columns in the first matrix must equal the count of rows in the second matrix.
     * @param matrix the second matrix.
     * @return result of multiplying.
     */
    public Matrix multiply(Matrix matrix) {
        Matrix result = new Matrix(this.getRows(), matrix.getRows());
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < matrix.getColumns(); j++) {
                result.object[i][j] = 0;
                for (int k = 0; k < this.getColumns(); k++) {
                    result.object[i][j] += this.getRow(i)[k] * matrix.getColumn(j)[k];
                }
            }
        }
        return result;
    }

    /**
     * Summarizes two matrices.
     * The count of rows and columns in the first matrix must equal the count of rows and columns in the second matrix.
     * @param matrix the second matrix.
     * @return result of summarizing.
     */
    public Matrix summarize(Matrix matrix) {
        Matrix result = new Matrix(this.getRows(), this.getColumns());
        for (int i = 0; i < this.object.length; i++) {
            for (int j = 0; j < this.object[0].length; j++) {
                result.object[i][j] = matrix.object[i][j] + this.object[i][j];
            }
        }
        return result;
    }

    /**
     * Transposes the matrix.
     * An element in [i] row and [j] column becomes an element in [j] row and [i] column.
     * @return result of transposing.
     */
    public Matrix transpose() {
        Matrix result = new Matrix(this.getColumns(), this.getRows());
        for (int i = 0; i < this.object[0].length; i++) {
            for (int j = 0; j < this.object.length; j++) {
                result.object[i][j] = this.object[j][i];
            }
        }
        return result;
    }

    /**
     * Compare matrices.
     * Matrices are equal if all theirs elements are equal.
     * @param matrix matrix to compare.
     * @return true if matrices are equals, else false.
     */
    public boolean ifEquals(Matrix matrix) {
        boolean flag = true;
        if (this.getColumns() == matrix.getColumns() || this.getRows() == matrix.getRows()) {
            for (int i = 0; i < this.object.length; i++) {
                for (int j = 0; j < this.object[0].length; j++) {
                    if (this.object[i][j] != matrix.object[i][j])
                        flag = false;
                }
            }
        } else
            flag = false;
        return flag;
    }

    /**
     * Concatenates matrices.
     * The count of rows in the first matrix must equal the count of rows in the second matrix.
     * The second matrix connects to a right side of the first matrix.
     * @param matrix the second matrix.
     * @return result of concatenating.
     */
    public Matrix concatenateInRow(Matrix matrix) {
        Matrix result = new Matrix(this.getRows(), this.getColumns() + matrix.getColumns());
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns() + matrix.getColumns(); j++) {
                if (j < this.getColumns())
                    result.object[i][j] = this.object[i][j];
                else
                    result.object[i][j] = matrix.object[i][j - this.getColumns()];
            }
        }
        return result;
    }

    /**
     * Concatenates matrices.
     * The count of columns in the first matrix must equal the count of columns in the second matrix.
     * The second matrix connects to a bottom of the first matrix.
     * @param matrix the second matrix.
     * @return result of concatenating.
     */
    public Matrix concatenateInColumn(Matrix matrix) {
        Matrix result = new Matrix(this.getRows() + matrix.getRows(), this.getColumns());
        for (int i = 0; i < this.getRows() + matrix.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                if (i < this.getRows())
                    result.object[i][j] = this.object[i][j];
                else
                    result.object[i][j] = matrix.object[i - this.getRows()][j];
            }
        }
        return result;
    }

    /**
     * Every element in matrix becomes a square of same elements.
     * @param count the length of square's side.
     * @return result of blowing.
     */
    public Matrix blowUp(int count) {
        Matrix result = new Matrix(this.getRows() * count, this.getColumns() * count);
        for (int i = 0; i < this.getRows() * count; i++) {
            for (int j = 0; j < this.getColumns() * count; j++) {
                result.object[i][j] = this.object[i / count][j / count];
            }
        }
        return result;
    }

    /**
     * Each square of elements in matrix becomes an element.
     * First square begins at [0][0].
     * If elements in the square aren't equal, the resulting element becomes a arithmetic mean of all elements in the square.
     * @param count the length of square's side.
     * @return result of blowing.
     */
    public Matrix blowDown(int count) {
        Matrix result = new Matrix(this.getRows() / count, this.getColumns() / count);
        double element = 0;
        for (int i = 0; i < this.getRows() / count; i++) {
            for (int j = 0; j < this.getColumns() / count; j++) {
                for (int k = 0; k < count; k++) {
                    for (int l = 0; l < count; l++) {
                        element += this.object[i * count + k][j * count + l];
                    }
                }
                element /= (count * count);
                result.object[i][j] = element;
                element = 0;
            }
        }
        return result;
    }

    /**
     * Calculates the determinant of the matrix.
     * The count of rows in the matrix must equal the count of columns in matrix.
     * @return determinant.
     */
    public double determinant() {
        double determinant = 0;
        for (int i = 0; i < this.getColumns(); i++) {
            if (this.getColumns() == 2)
                determinant = this.getElement(0, 0) * this.getElement(1, 1) - this.getElement(0, 1) * this.getElement(1, 0);
            else {
                determinant += this.algebraicComplement(0, i) * this.getElement(0, i);
            }
        }
        return determinant;
    }

    /**
     * Excludes a row from the matrix.
     * @param row index of excluded row.
     * @return the matrix without excluded row.
     */
    public Matrix excludeRow(int row) {
        Matrix result = new Matrix(this.getRows() - 1, this.getColumns());
        for (int i = 0; i < this.getRows() - 1; i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                if (i < row)
                    result.object[i][j] = this.object[i][j];
                else
                    result.object[i][j] = this.object[i + 1][j];
            }
        }
        return result;
    }

    /**
     * Excludes a column from the matrix.
     * @param column index of excluded column.
     * @return the matrix without excluded column.
     */
    public Matrix excludeColumn(int column) {
        Matrix result = new Matrix(this.getRows(), this.getColumns() - 1);
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns() - 1; j++) {
                if (j < column)
                    result.object[i][j] = this.object[i][j];
                else
                    result.object[i][j] = this.object[i][j + 1];
            }
        }
        return result;
    }

    /**
     * Inserts a row in the matrix.
     * Indexes of all rows after inserted row increases by one (including row with index of inserted row).
     * @param row inserted row.
     * @param rowNumber index of inserted row.
     * @return the matrix with inserted row.
     */
    public Matrix insertRow(double[] row, int rowNumber) {
        Matrix result = new Matrix(this.getRows() + 1, this.getColumns());
        for (int i = 0; i < this.getRows() + 1; i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                if (i < rowNumber)
                    result.object[i][j] = this.object[i][j];
                else if (i == rowNumber)
                    result.object[i][j] = row[j];
                else result.object[i][j] = this.object[i - 1][j];
            }
        }
        return result;
    }

    /**
     * Inserts a column in the matrix.
     * Indexes of all columns after inserted column increases by one (including column with index of inserted column).
     * @param column inserted column.
     * @param columnNumber index of inserted column.
     * @return the matrix with inserted column.
     */
    public Matrix insertColumn(double[] column, int columnNumber) {
        Matrix result = new Matrix(this.transpose());
        return result.insertRow(column, columnNumber).transpose();
    }

    /**
     * Rotates matrix clockwise by 90 degrees some times.
     * @param times count of rotates.
     * @return the rotated matrix.
     */
    public Matrix rotate(int times) {
        Matrix result = new Matrix(1, 1);
        switch (times % 4) {
            case 0:
                result = this;
                break;
            case 1:
                result = new Matrix(this.getColumns(), this.getRows());
                for (int i = 0; i < this.getRows(); i++) {
                    result = result.setColumn(this.getRow(this.getRows() - 1 - i), i);
                }
                break;
            case 2:
                result = new Matrix(this.getRows(), this.getColumns());
                for (int i = 0; i < this.getRows(); i++) {
                    for (int j = 0; j < this.getColumns(); j++) {
                        result.object[i][j] = this.object[this.getRows() - 1 - i][this.getColumns() - 1 - j];
                    }
                }
                break;
            case 3:
                result = new Matrix(this.getColumns(), this.getRows());
                for (int i = 0; i < this.getRows(); i++) {
                    result = result.setRow(this.getColumn(this.getColumns() - 1 - i), i);

                }
                break;
        }
        return result;
    }

    /**
     * Calculates minor for the element in matrix.
     * The count of rows in the matrix must equal the count of columns in matrix.
     * @param row index of row, where the element located.
     * @param column index of column, where the element located.
     * @return minor for element.
     */
    public double minor(int row, int column) {
        Matrix matrix = new Matrix(this.object);
        matrix = matrix.excludeRow(row);
        matrix = matrix.excludeColumn(column);
        return matrix.determinant();
    }

    /**
     * Calculates algebraic complement for the element in matrix.
     * The count of rows in the matrix must equal the count of columns in matrix.
     * @param row index of row, where the element located.
     * @param column index of column, where the element located.
     * @return algebraic complement for element.
     */
    public double algebraicComplement(int row, int column) {
        if ((row + column) % 2 == 0)
            return this.minor(row, column);
        else
            return -this.minor(row, column);
    }

    /**
     * Turn the matrix to inverse matrix.
     * @return inverse matrix
     */
    public Matrix inverse() {
        Matrix result = new Matrix(this.getRows(), this.getRows());
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                result.object[i][j] = this.transpose().algebraicComplement(i, j);
            }
        }
        return result.divide(this.determinant());
    }

    /**
     * Divides matrix by matrix.
     * Multiplies the first matrix by the inverse second matrix.
     * The count of columns in the first matrix must equal the number of columns in the second matrix.
     * @param matrix the second matrix.
     * @return result of dividing.
     */
    public Matrix divide(Matrix matrix) {
        return this.multiply(matrix.inverse());
    }

    /**
     * Divides each element in matrix by number.
     * @param count a divider.
     * @return matrix with divided elements.
     */
    public Matrix divide(double count) {
        return this.multiply(1 / count);
    }
}